function [sigDEN,wDEC] = func_denoise_sw1d(SIG)
% FUNC_DENOISE_SW1D Saved Denoising Process.
%   SIG: vector of data
%   -------------------
%   sigDEN: vector of denoised data
%   wDEC: stationary wavelet decomposition

%  Auto-generated by Wavelet Toolbox on 08-May-2014 21:14:19

% Analysis parameters.
%---------------------
wname = 'haar';
level = 8;

% Denoising parameters.
%----------------------
% meth = 'sqtwolog';
% scal_OR_alfa = sln;
sorh = 's';    % Specified soft or hard thresholding
thrSettings =  {...
    [...
    1.000000000000000 524288.000000000000000      0.336219618697419; ...
    ]; ...
    [...
    1.000000000000000 524288.000000000000000      0.336219618697419; ...
    ]; ...
    [...
    1.000000000000000 524288.000000000000000      0.336219618697419; ...
    ]; ...
    [...
    1.000000000000000 524288.000000000000000      0.336219618697419; ...
    ]; ...
    [...
    1.000000000000000 524288.000000000000000      0.336219618697419; ...
    ]; ...
    [...
    1.000000000000000 524288.000000000000000      0.336219618697419; ...
    ]; ...
    [...
    1.000000000000000 524288.000000000000000      0.336219618697419; ...
    ]; ...
    [...
    1.000000000000000 524288.000000000000000      0.336219618697419; ...
    ]; ...
    };

% Decompose using SWT.
%---------------------
wDEC = swt(SIG,level,wname);

% Denoise.
%---------
len = length(SIG);
for k = 1:level
    thr_par = thrSettings{k};
    if ~isempty(thr_par)
        NB_int = size(thr_par,1);
        x      = [thr_par(:,1) ; thr_par(NB_int,2)];
        x      = round(x);
        x(x<1) = 1;
        x(x>len) = len;
        thr = thr_par(:,3);
        for j = 1:NB_int
            if j==1 , d_beg = 0; else d_beg = 1; end
            j_beg = x(j)+d_beg;
            j_end = x(j+1);
            j_ind = (j_beg:j_end);
            wDEC(k,j_ind) = wthresh(wDEC(k,j_ind),sorh,thr(j));
        end
    end
end

% Reconstruct the denoise signal using ISWT.
%-------------------------------------------
sigDEN = iswt(wDEC,wname);
